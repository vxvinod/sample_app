Chapter 6:

Notes

 rails generate model User name:string email:string
      invoke  active_record
      create    db/migrate/[timestamp]_create_users.rb
      create    app/models/user.rb
      invoke    rspec
      create      spec/models/user_spec.rb


*bundle exec rake db:rollback --- executes drop table command
* annotate gem is used to create database schema in the model file in comment format.

Console 

User.new
User.create
user.destroy
user.reload
user.update_attributes



*bundle exec rake db:test:prepare ---------------- prepare test database

Presence Validation
The presence: true argument is a one-element options hash; recall from Section 4.3.4 that curly braces are optional when passing hashes as the final argument in a method

validates(:name, presence: true)

user.errors.full_messages----display error in console

validates :name,  presence: true, length: { maximum: 50 }  -----validates length of field

* user_with_same_email = @user.dup
      user_with_same_email.save	--------------
The method here is to make a user with the same email address as @user, which we accomplish using @user.dup, which creates a duplicate user with the same attributes. Since we then save that user, the original @user has an email address that already exists in the database, and hence should not be valid.				

*validates :email, presence: true, format: { with: VALID_EMAIL_REGEX },
                    uniqueness: { case_sensitive: false }


checks case sensitive also


*  rails generate migration add_index_to_users_email -----adds migration add_index to users model



*class AddIndexToUsersEmail < ActiveRecord::Migration
  def change
    add_index :users, :email, unique: true
  end
end
This uses a Rails method called add_index to add an index on the email column of the users table. The index by itself doesn’t enforce uniqueness, but the option unique: true does.


*if migration fails in 6.22 add these lines
 add_index "users", ["email"], :name => "index_users_on_email", :unique => true in schema.rb
 *before_save --method is invloked before save

*password digest
We’ll use the state-of-the-art hash function called bcrypt to irreversibly encrypt the password to form the password hash. To use bcrypt in the sample application, we need to add the bcrypt-ruby gem to our Gemfile 
gem 'bcrypt-ruby', '3.0.1'


RSpec’s let method provides a convenient way to create local variables inside tests. The syntax might look a little strange, but its effect is similar to variable assignment. The argument of let is a symbol, and it takes a block whose return value is assigned to a local variable with the symbol’s name. In other words,

let(:found_user) { User.find_by_email(@user.email) }



* %= debug(params) if Rails.env.development? %>---displays some useful information about each page using the built-in debug method and params variable 

*This introduces the Sass mixin facility, in this case called box_sizing. A mixin allows a group of CSS rules to be packaged up and used for multiple elements, converting

.debug_dump {
  .
  .
  .
  @include box_sizing;
}
to

.debug_dump {
  .
  .
  .
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

*  $ rails console test
  Loading test environment
  >> Rails.env
  => "test"
  >> Rails.env.test?
  => true ------loads test environment
  
  * $ rails server --environment production
If you view your app running in production, it won’t work without a production database, which we can create by running rake db:migrate in production:

  $ bundle exec rake db:migrate RAILS_ENV=production
  